@page "/Edit/RendaFixa/{Id}";
@inject EditFixedDepositService EditFixedDepositService;

@if (company is not null)
{
    <h3>@oldCompany</h3>

    <form class="text-white">
        <div class="row row-cols-1 fs-5 ms-5">

            <div class="row row-cols-2" style="margin-bottom: 15px;">
                <div class="col-sm-2 text-right">
                    <label>Empresa</label>
                </div>
                <div class="col-sm-6">
                    <input @bind-value="company" class="form-control col-3" type="text" />
                </div>
            </div>

            <div class="row row-cols-2" style="margin-bottom: 15px;">
                <div class="col-sm-2 text-right">
                    <label>Quantidade</label>
                </div>
                <div class="col-sm-6">
                    <input @bind-value="amount" class="form-control col-3" type="number" min="0" />
                </div>
            </div>

            <div class="row row-cols-2" style="margin-bottom: 15px;">
                <div class="col-sm-2 text-right">
                    <label>Preço</label>
                </div>
                <div class="col-sm-6">
                    <input @bind-value="priceString" class="form-control col-3" oninput="formatPriceValue(this)" type="text" min="0" />
                </div>
            </div>

            <div class="row row-cols-2" style="margin-bottom: 15px;">
                <div class="col-sm-2 text-right">
                    <label>Rentabilidade</label>
                </div>
                <div class="col-sm-6">
                    <input @bind-value="profitabilityString" class="form-control col-3" oninput="formatPriceValue(this)" type="text" min="0" />
                </div>
            </div>


            <div class="row row-cols-2">
                <div class="col-sm-2 text-right">
                    <label>Produto</label>
                </div>
                <div class="col-sm-6">
                    <select @bind="fixedDepositsType" class="form-select" style="width:150px;">
                        @foreach (FixedDepositsType item in EditFixedDepositService.GetEnumValues<FixedDepositsType>())
                        {
                            <option value="@item">@item.ToString()</option>
                        }
                    </select>
                </div>
            </div>

            <div class="row row-cols-2">
                <div class="col-sm-2 text-right">
                    <label>Indexador</label>
                </div>
                <div class="col-sm-6">
                    <select @bind="indexType" class="form-select" style="width:150px;">
                        @foreach (IndexType item in EditFixedDepositService.GetEnumValues<IndexType>())
                        {
                            <option value="@item">@item.ToString()</option>
                        }
                    </select>
                </div>
            </div>

            <div class="row row-cols-2" style="margin-bottom: 15px;">
                <div class="col-sm-2 text-right">
                    <label>Aplicação</label>
                </div>
                <div class="col-sm-6">
                    <input @bind-value="recordDate" class="form-control col-3" type="date">
                </div>
            </div>

            <div class="row row-cols-2" style="margin-bottom: 15px;">
                <div class="col-sm-2 text-right">
                    <label>Operação</label>
                </div>
                <div class="col-sm-6">
                    <input @bind-value="operationDate" class="form-control col-3" type="date">
                </div>
            </div>

            <div class="row row-cols-2" style="margin-bottom: 15%;">
                <div class="col-sm-2 text-right">
                </div>
                <div class="col-sm-6">
                    <label class="rounded-pill" style="background-color:red;">
                        &nbsp; <InputCheckbox @bind-Value="@delete" /> Deletar &nbsp;
                    </label>&nbsp;
                    @if (delete)
                    {
                        <button @onclick="Delete" class="btn btn-danger rounded-pill" style="width:100px;">Confirmar</button>
                    }
                    else
                    {
                        <button @onclick="Update" class="btn btn-success rounded-pill" style="width:100px;">Salvar</button>
                    }
                </div>
            </div>
        </div>
    </form>
}
else
{
    <h2>Investimento não encontrado</h2>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private string company;
    private string oldCompany;
    private int amount;
    private decimal price;
    private decimal profitability;
    private string priceString = string.Empty;
    private string profitabilityString = string.Empty;

    public IndexType indexType;
    public FixedDepositsType fixedDepositsType;
    private DateTime recordDate = DateTime.Now;
    private DateTime liquidityDate = DateTime.Now;
    private DateTime dueDate = DateTime.Now;
    private DateTime operationDate = DateTime.Now;
    private const InvestmentType investmentType = InvestmentType.FixedDeposit;
    private const OperationType operationType = OperationType.Buy;
    private bool delete = false;

    private FixedDeposit fixedDeposit = null;
    private FixedDeposit oldFixedDeposit = null;

    protected override async Task OnInitializedAsync()
    {
        fixedDeposit = await EditFixedDepositService.GetAsync(new Guid(Id));

        if (fixedDeposit is not null)
        {
            company = fixedDeposit.Company;
            oldCompany = fixedDeposit.Company;
            amount = fixedDeposit.Amount;
            price = fixedDeposit.Price;
            profitability = fixedDeposit.Profitability;
            priceString = fixedDeposit.Price.ToString();
            profitabilityString = fixedDeposit.Profitability.ToString();
            indexType = fixedDeposit.IndexType;
            fixedDepositsType = fixedDeposit.FixedDepositsType;
        }
    }

    private async Task Update()
    {
        fixedDeposit.Amount = amount;
        fixedDeposit.Company = company;
        fixedDeposit.DueDate = dueDate;
        //fixedDeposit.FinancialInstitutionId = financialInstitutionId;
        fixedDeposit.FixedDepositsType = fixedDepositsType;
        fixedDeposit.IndexType = indexType;
        fixedDeposit.InvestmentType = investmentType;
        fixedDeposit.LiquidityDate = liquidityDate;
        fixedDeposit.OperationDate = operationDate;
        fixedDeposit.RecordDate = recordDate;
        fixedDeposit.OperationType = operationType;
        fixedDeposit.Price = price;
        fixedDeposit.Profitability = profitability;

        await EditFixedDepositService.Update(fixedDeposit);
    }

    private async Task Delete()
    {
        await EditFixedDepositService.Delete(fixedDeposit);
    }

    protected override bool ShouldRender()
    {
        decimal.TryParse(priceString, out price);
        decimal.TryParse(profitabilityString, out profitability);
        return base.ShouldRender();
    }
}
